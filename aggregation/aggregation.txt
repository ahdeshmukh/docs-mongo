Uses restaurant collection created using mongo import

=> Find a count of all the restaurants
db.restaurants.aggregate({"$group": {"_id": "all", "sum": {"$sum": 1}}})
Similar to parsing through each document and incrementing the count by 1 each time
Can be easily achieved using db.restaurants.count()


=> Find the counts of all restaurants group by boroughs
db.restaurants.aggregate({"$group": {"_id": "$borough", "sum": {"$sum": 1}}})

=> Order by name of restaurant ascending
db.restaurants.find().sort({name: 1})
db.restaurants.find({}, {name: 1}).sort({name: 1})

=> Find count, average value of restaurant_id, min restaurant_id and max restaurant_id all in one query
db.restaurants.aggregate(
	{"$group": {
			"_id": "all", 
			"sum": {"$sum": 1},
			"avg": {"$avg": "$restaurant_id"},
			"min": {"$min": "$restaurant_id"},
			"max": {"$max": "$restaurant_id"}
		}
	}
)

=> Find the average grade of restaurants group by restaurant (Note that we can use . notation in "$grades.score")
db.restaurants.aggregate(
	{"$group": {
			"_id": "$restaurant_id",
			"avg": {"$avg": "$grades.score"}
		}
	}
)

=> Rules
a) The key of the group by field should be "_id"
eg: db.restaurants.aggregate({"$group": {"_id": "all", "sum": {"$sum": 1}}})
eg: db.restaurants.aggregate({"$group": {"_id": "$borough", "sum": {"$sum": 1}}})

b) Field names must not contain a period
eg: db.restaurants.aggregate({"$group": {"_id": "all", "stats.sum": {"$sum": 1}}}) will give error

c) Field names must be flat, otherwise mongo throws an error
eg: not allowed shown below. here after "stats", mongo expects a valid mongo aggregation expression like "$sum", but instead it sees "sum"
db.restaurants.aggregate(
	{"$group": {
			"_id": "all",
			"stats": {
				"sum": {"$sum": 1},
				"avg": {"$avg": "$restaurant_id"},
			}
		}
	}
)


=> Add to Set ($addToSet)
The $addToSet operator adds a value to an array unless the value is already present, in which case $addToSet does nothing to that array.

Consider a document in a collection test containing an array field letters:
{ _id: 1, letters: ["a", "b"] }

The following operation appends the array [ "c", "d" ] to the letters field:
db.test.update(
   { _id: 1 },
   { $addToSet: {letters: [ "c", "d" ] } }
)

he letters array now includes the [ "c", "d" ] array as an element:
{ _id: 1, letters: [ "a", "b", [ "c", "d" ] ] }

To add each element of the value separately, use the $each modifier with $addToSet
Eg: A collection inventory has the following document:
{ _id: 1, item: "cable", tags: [ "electronics", "supplies" ] }

Then the following operation uses the $addToSet operator with the $each modifier to add multiple elements to the tags array:
db.inventory.update(
   { _id: 1 },
   { $addToSet: { tags: { $each: [ "camera", "electronics", "accessories" ] } } }
 )

The operation adds only "camera" and "accessories" to the tags array since "electronics" already exists in the array. The results look like:
{
  _id: 1,
  item: "cable",
  tags: [ "electronics", "supplies", "camera", "accessories" ]
}

=> Push
Pushes data to the array. Even the duplicates

Example usage of addToSet and push

If you have a blog and want to see how many different users commented on an article, you can use addToSet, by grouping on the article id and addToSet the commenter id.

If we want to analyze the level of engagement, we can use push. This will tell us how many times a user has commented on the article and help find who are active users.