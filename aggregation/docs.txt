Uses restaurant collection created using mongo import

1) Find a count of all the restaurants
db.restaurants.aggregate({"$group": {"_id": "all", "sum": {"$sum": 1}}})
Similar to parsing through each document and incrementing the count by 1 each time
Can be easily achieved using db.restaurants.count()


2) Find the counts of all restaurants group by boroughs
db.restaurants.aggregate({"$group": {"_id": "$borough", "sum": {"$sum": 1}}})

3) Order by name of restaurant ascending
db.restaurants.find().sort({name: 1})
db.restaurants.find({}, {name: 1}).sort({name: 1})

4) Find count, average value of restaurant_id, min restaurant_id and max restaurant_id all in one query
db.restaurants.aggregate(
	{"$group": {
			"_id": "all", 
			"sum": {"$sum": 1},
			"avg": {"$avg": "$restaurant_id"},
			"min": {"$min": "$restaurant_id"},
			"max": {"$max": "$restaurant_id"}
		}
	}
)

5) Rules
a) The key of the group by field should be "_id"
eg: db.restaurants.aggregate({"$group": {"_id": "all", "sum": {"$sum": 1}}})
eg: db.restaurants.aggregate({"$group": {"_id": "$borough", "sum": {"$sum": 1}}})

b) Field names must not contain a period
eg: db.restaurants.aggregate({"$group": {"_id": "all", "stats.sum": {"$sum": 1}}}) will give error

c) Field names must be flat, otherwise mongo throws an error
eg: not allowed shown below. here after "stats", mongo expects a valid mongo aggregation expression like "$sum", but instead it sees "sum"
db.restaurants.aggregate(
	{"$group": {
			"_id": "all",
			"stats": {
				"sum": {"$sum": 1},
				"avg": {"$avg": "$restaurant_id"},
			}
		}
	}
)
